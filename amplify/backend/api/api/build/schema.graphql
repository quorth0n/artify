type S3Object {
  bucket: String!
  region: String!
  key: String!
}

type Image @aws_api_key @aws_iam @aws_cognito_user_pools {
  resMode: String!
  image: S3Object
  thumb: String
}

type User @aws_api_key @aws_iam @aws_cognito_user_pools {
  username: ID!
  avatar: String
  bg: String
  realName: String
  location: String
  description: String
  website: String
  monthlyViews: Int
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Vote @aws_api_key @aws_cognito_user_pools {
  id: ID!
  postID: ID!
  owner: ID
  upvote: Int!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Post @aws_api_key @aws_iam @aws_cognito_user_pools {
  id: ID!
  title: String!
  description: String
  createdAt: AWSDateTime
  userID: ID!
  thumb: String!
  resolutions: [Image]!
  monthlyViews: Int
  totalViews: Int
  totalScore: Int
  updatedAt: AWSDateTime!
  tags(tagName: ModelIDKeyConditionInput, filter: ModelTaggedPostFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelTaggedPostConnection @aws_api_key @aws_cognito_user_pools
}

type TaggedPost @aws_api_key @aws_cognito_user_pools {
  id: ID!
  postID: ID!
  tagName: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  post: Post @aws_api_key @aws_iam @aws_cognito_user_pools
  tag: Tag @aws_api_key @aws_cognito_user_pools
}

type Tag @aws_api_key @aws_cognito_user_pools {
  name: ID!
  description: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  posts(postID: ModelIDKeyConditionInput, filter: ModelTaggedPostFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelTaggedPostConnection @aws_api_key @aws_cognito_user_pools
}

type Mutation {
  viewPost(id: ID!): Post @aws_api_key
  upvotePost(id: ID!): Post @aws_cognito_user_pools
  downvotePost(id: ID!): Post @aws_cognito_user_pools
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User
  createVote(input: CreateVoteInput!, condition: ModelVoteConditionInput): Vote
  updateVote(input: UpdateVoteInput!, condition: ModelVoteConditionInput): Vote
  deleteVote(input: DeleteVoteInput!, condition: ModelVoteConditionInput): Vote
  createPost(input: CreatePostInput!, condition: ModelPostConditionInput): Post
  deletePost(input: DeletePostInput!, condition: ModelPostConditionInput): Post
  createTaggedPost(input: CreateTaggedPostInput!, condition: ModelTaggedPostConditionInput): TaggedPost
  updateTaggedPost(input: UpdateTaggedPostInput!, condition: ModelTaggedPostConditionInput): TaggedPost
  deleteTaggedPost(input: DeleteTaggedPostInput!, condition: ModelTaggedPostConditionInput): TaggedPost
  createTag(input: CreateTagInput!, condition: ModelTagConditionInput): Tag
  updateTag(input: UpdateTagInput!, condition: ModelTagConditionInput): Tag
  deleteTag(input: DeleteTagInput!, condition: ModelTagConditionInput): Tag
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User @aws_iam @aws_cognito_user_pools
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User @aws_iam @aws_cognito_user_pools
  updatePost(input: UpdatePostInput!, condition: ModelPostConditionInput): Post @aws_iam @aws_cognito_user_pools
}

input SearchableStringFilterInput {
  ne: String
  eq: String
  range: [String]
  match: String
  matchPhrase: String
  matchPhrasePrefix: String
  multiMatch: String
  exists: Boolean
  wildcard: String
  regexp: String
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserConnection @aws_api_key @aws_iam @aws_cognito_user_pools {
  items: [User]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelUserFilterInput {
  username: ModelIDInput
  avatar: ModelStringInput
  bg: ModelStringInput
  realName: ModelStringInput
  location: ModelStringInput
  description: ModelStringInput
  website: ModelStringInput
  monthlyViews: ModelIntInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getUser(username: ID!): User @aws_api_key @aws_iam @aws_cognito_user_pools
  listUsers(username: ID, filter: ModelUserFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelUserConnection @aws_api_key @aws_iam @aws_cognito_user_pools
  searchUsers(filter: SearchableUserFilterInput, sort: SearchableUserSortInput, limit: Int, nextToken: String): SearchableUserConnection @aws_api_key @aws_iam @aws_cognito_user_pools
  getVote(id: ID!): Vote @aws_api_key @aws_cognito_user_pools
  listVotes(filter: ModelVoteFilterInput, limit: Int, nextToken: String): ModelVoteConnection @aws_api_key @aws_cognito_user_pools
  voteByPostByOwner(postID: ID, owner: ModelIDKeyConditionInput, sortDirection: ModelSortDirection, filter: ModelVoteFilterInput, limit: Int, nextToken: String): ModelVoteConnection @aws_api_key @aws_cognito_user_pools
  listPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection @aws_api_key @aws_iam @aws_cognito_user_pools
  getPost(id: ID!): Post @aws_api_key @aws_iam @aws_cognito_user_pools
  searchPosts(filter: SearchablePostFilterInput, sort: SearchablePostSortInput, limit: Int, nextToken: String): SearchablePostConnection @aws_api_key @aws_iam @aws_cognito_user_pools
  getTaggedPost(id: ID!): TaggedPost @aws_api_key @aws_cognito_user_pools
  listTaggedPosts(filter: ModelTaggedPostFilterInput, limit: Int, nextToken: String): ModelTaggedPostConnection @aws_api_key @aws_cognito_user_pools
  listTags(name: ID, filter: ModelTagFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelTagConnection @aws_api_key @aws_cognito_user_pools
  getTag(name: ID!): Tag @aws_api_key @aws_cognito_user_pools
}

input CreateUserInput {
  username: ID!
  avatar: String
  bg: String
  realName: String
  location: String
  description: String
  website: String
  monthlyViews: Int
}

input UpdateUserInput {
  username: ID!
  avatar: String
  bg: String
  realName: String
  location: String
  description: String
  website: String
  monthlyViews: Int
}

input DeleteUserInput {
  username: ID!
}

input ModelUserConditionInput {
  avatar: ModelStringInput
  bg: ModelStringInput
  realName: ModelStringInput
  location: ModelStringInput
  description: ModelStringInput
  website: ModelStringInput
  monthlyViews: ModelIntInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

type Subscription {
  onDeleteUser(username: String): User @aws_subscribe(mutations: ["deleteUser"])
  onCreateVote(owner: String!): Vote @aws_subscribe(mutations: ["createVote"])
  onUpdateVote(owner: String!): Vote @aws_subscribe(mutations: ["updateVote"])
  onDeleteVote(owner: String!): Vote @aws_subscribe(mutations: ["deleteVote"])
  onCreatePost: Post @aws_subscribe(mutations: ["createPost"])
  onDeletePost(userID: String!): Post @aws_subscribe(mutations: ["deletePost"])
  onCreateTaggedPost: TaggedPost @aws_subscribe(mutations: ["createTaggedPost"])
  onUpdateTaggedPost: TaggedPost @aws_subscribe(mutations: ["updateTaggedPost"])
  onDeleteTaggedPost: TaggedPost @aws_subscribe(mutations: ["deleteTaggedPost"])
  onCreateTag: Tag @aws_subscribe(mutations: ["createTag"])
  onUpdateTag: Tag @aws_subscribe(mutations: ["updateTag"])
  onDeleteTag: Tag @aws_subscribe(mutations: ["deleteTag"])
  onCreateUser(username: String): User @aws_subscribe(mutations: ["createUser"]) @aws_iam @aws_cognito_user_pools
  onUpdateUser(username: String): User @aws_subscribe(mutations: ["updateUser"]) @aws_iam @aws_cognito_user_pools
  onUpdatePost(userID: String!): Post @aws_subscribe(mutations: ["updatePost"]) @aws_iam @aws_cognito_user_pools
}

type ModelVoteConnection @aws_api_key @aws_cognito_user_pools {
  items: [Vote]
  nextToken: String
}

input ModelVoteFilterInput {
  id: ModelIDInput
  postID: ModelIDInput
  owner: ModelIDInput
  upvote: ModelIntInput
  and: [ModelVoteFilterInput]
  or: [ModelVoteFilterInput]
  not: ModelVoteFilterInput
}

input CreateVoteInput {
  id: ID
  postID: ID!
  owner: ID
  upvote: Int!
}

input UpdateVoteInput {
  id: ID!
  postID: ID
  owner: ID
  upvote: Int
}

input DeleteVoteInput {
  id: ID
}

input ModelVoteConditionInput {
  postID: ModelIDInput
  upvote: ModelIntInput
  and: [ModelVoteConditionInput]
  or: [ModelVoteConditionInput]
  not: ModelVoteConditionInput
}

input ImageInput {
  resMode: String!
  image: S3ObjectInput
  thumb: String
}

input S3ObjectInput {
  bucket: String!
  region: String!
  key: String!
}

type ModelPostConnection @aws_api_key @aws_iam @aws_cognito_user_pools {
  items: [Post]
  nextToken: String
}

input ModelPostFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  description: ModelStringInput
  createdAt: ModelStringInput
  userID: ModelIDInput
  thumb: ModelStringInput
  monthlyViews: ModelIntInput
  totalViews: ModelIntInput
  totalScore: ModelIntInput
  and: [ModelPostFilterInput]
  or: [ModelPostFilterInput]
  not: ModelPostFilterInput
}

input CreatePostInput {
  id: ID
  title: String!
  description: String
  createdAt: AWSDateTime
  userID: ID!
  thumb: String!
  resolutions: [ImageInput]!
  monthlyViews: Int
  totalViews: Int
  totalScore: Int
}

input UpdatePostInput {
  id: ID!
  title: String
  description: String
  createdAt: AWSDateTime
  userID: ID
  thumb: String
  resolutions: [ImageInput]
  monthlyViews: Int
  totalViews: Int
  totalScore: Int
}

input DeletePostInput {
  id: ID
}

input ModelPostConditionInput {
  title: ModelStringInput
  description: ModelStringInput
  createdAt: ModelStringInput
  thumb: ModelStringInput
  monthlyViews: ModelIntInput
  totalViews: ModelIntInput
  totalScore: ModelIntInput
  and: [ModelPostConditionInput]
  or: [ModelPostConditionInput]
  not: ModelPostConditionInput
}

type ModelTaggedPostConnection @aws_api_key @aws_cognito_user_pools {
  items: [TaggedPost]
  nextToken: String
}

input ModelTaggedPostFilterInput {
  id: ModelIDInput
  postID: ModelIDInput
  tagName: ModelIDInput
  and: [ModelTaggedPostFilterInput]
  or: [ModelTaggedPostFilterInput]
  not: ModelTaggedPostFilterInput
}

input CreateTaggedPostInput {
  id: ID
  postID: ID!
  tagName: ID!
}

input UpdateTaggedPostInput {
  id: ID!
  postID: ID
  tagName: ID
}

input DeleteTaggedPostInput {
  id: ID
}

input ModelTaggedPostConditionInput {
  postID: ModelIDInput
  tagName: ModelIDInput
  and: [ModelTaggedPostConditionInput]
  or: [ModelTaggedPostConditionInput]
  not: ModelTaggedPostConditionInput
}

type ModelTagConnection @aws_api_key @aws_cognito_user_pools {
  items: [Tag]
  nextToken: String
}

input ModelTagFilterInput {
  name: ModelIDInput
  description: ModelStringInput
  and: [ModelTagFilterInput]
  or: [ModelTagFilterInput]
  not: ModelTagFilterInput
}

input CreateTagInput {
  name: ID!
  description: String
}

input UpdateTagInput {
  name: ID!
  description: String
}

input DeleteTagInput {
  name: ID!
}

input ModelTagConditionInput {
  description: ModelStringInput
  and: [ModelTagConditionInput]
  or: [ModelTagConditionInput]
  not: ModelTagConditionInput
}

input ModelIDKeyConditionInput {
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  between: [ID]
  beginsWith: ID
}

input SearchableIDFilterInput {
  ne: ID
  gt: ID
  lt: ID
  gte: ID
  lte: ID
  eq: ID
  match: ID
  matchPhrase: ID
  matchPhrasePrefix: ID
  multiMatch: ID
  exists: Boolean
  wildcard: ID
  regexp: ID
}

input SearchableIntFilterInput {
  ne: Int
  gt: Int
  lt: Int
  gte: Int
  lte: Int
  eq: Int
  range: [Int]
}

input SearchableFloatFilterInput {
  ne: Float
  gt: Float
  lt: Float
  gte: Float
  lte: Float
  eq: Float
  range: [Float]
}

input SearchableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input SearchableUserFilterInput {
  username: SearchableIDFilterInput
  avatar: SearchableStringFilterInput
  bg: SearchableStringFilterInput
  realName: SearchableStringFilterInput
  location: SearchableStringFilterInput
  description: SearchableStringFilterInput
  website: SearchableStringFilterInput
  monthlyViews: SearchableIntFilterInput
  and: [SearchableUserFilterInput]
  or: [SearchableUserFilterInput]
  not: SearchableUserFilterInput
}

enum SearchableSortDirection {
  asc
  desc
}

enum SearchableUserSortableFields {
  username
  avatar
  bg
  realName
  location
  description
  website
  monthlyViews
}

input SearchableUserSortInput {
  field: SearchableUserSortableFields
  direction: SearchableSortDirection
}

type SearchableUserConnection @aws_api_key @aws_iam @aws_cognito_user_pools {
  items: [User]
  nextToken: String
  total: Int
}

input SearchablePostFilterInput {
  id: SearchableIDFilterInput
  title: SearchableStringFilterInput
  description: SearchableStringFilterInput
  createdAt: SearchableStringFilterInput
  userID: SearchableIDFilterInput
  thumb: SearchableStringFilterInput
  monthlyViews: SearchableIntFilterInput
  totalViews: SearchableIntFilterInput
  totalScore: SearchableIntFilterInput
  and: [SearchablePostFilterInput]
  or: [SearchablePostFilterInput]
  not: SearchablePostFilterInput
}

enum SearchablePostSortableFields {
  id
  title
  description
  createdAt
  userID
  thumb
  monthlyViews
  totalViews
  totalScore
}

input SearchablePostSortInput {
  field: SearchablePostSortableFields
  direction: SearchableSortDirection
}

type SearchablePostConnection @aws_api_key @aws_iam @aws_cognito_user_pools {
  items: [Post]
  nextToken: String
  total: Int
}
